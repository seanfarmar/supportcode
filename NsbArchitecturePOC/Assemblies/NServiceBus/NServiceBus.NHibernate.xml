<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.NHibernate</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.Persistence.NHibernate.NHibernateStorageContext">
            <summary>
            Provides users with access to the current NHibernate <see cref="T:NHibernate.ITransaction"/>, <see cref="T:System.Data.IDbConnection"/> and <see cref="T:NHibernate.ISession"/>. 
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateStorageContext.Connection">
            <summary>
            Gets the database connection associated with the current NHibernate <see cref="P:NServiceBus.Persistence.NHibernate.NHibernateStorageContext.Session"/>
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateStorageContext.DatabaseTransaction">
            <summary>
            Gets the database transaction associated with the current NHibernate <see cref="P:NServiceBus.Persistence.NHibernate.NHibernateStorageContext.Session"/> or null when using TransactionScope.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateStorageContext.Session">
            <summary>
            Gets the current context NHibernate <see cref="T:NHibernate.ISession"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateStorageContext.Transaction">
            <summary>
            Gets the current context NHibernate <see cref="T:NHibernate.ITransaction"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.DeduplicationConfig">
            <summary>
            Deduplication configuration extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.DeduplicationConfig.DisableGatewayDeduplicationSchemaUpdate(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence})">
            <summary>
            Disables automatic schema update.
            </summary>
            <param name="persistenceConfiguration"></param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.DeduplicationConfig.UseGatewayDeduplicationConfiguration(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},NHibernate.Cfg.Configuration)">
            <summary>
            Configures Subscription Storage to use the <paramref name="configuration"/>.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.SagaConfig">
            <summary>
            Saga configuration extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.SagaConfig.SagaTableNamingConvention(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},System.Func{System.Type,System.String})">
            <summary>
            Sets the convention to use for naming tables.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="tableNamingConvention">Convention to use for naming tables.</param>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.ConfigureNHibernate">
            <summary>
            Helper class to configure NHibernate persisters.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.Init">
            <summary>
            Initializes the <see cref="T:NServiceBus.Persistence.NHibernate.ConfigureNHibernate"/> NHibernate properties.
            </summary>
            <remarks>
            Configure NHibernate using the <c>&lt;hibernate-configuration&gt;</c> section
            from the application config file, if found, or the file <c>hibernate.cfg.xml</c> if the
            <c>&lt;hibernate-configuration&gt;</c> section not include the session-factory configuration.
            However those settings can be overwritten by our own configuration settings if specified.
            </remarks>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.TimeoutPersisterProperties">
            <summary>
            Timeout persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.SubscriptionStorageProperties">
            <summary>
            Subscription persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.SagaPersisterProperties">
            <summary>
            Saga persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.GatewayDeduplicationProperties">
            <summary>
            Gateway deduplication NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.DistributorPersisterProperties">
            <summary>
            Distributor persister NHibernate properties.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.OutboxProperties">
            <summary>
            Outbox persister NHibernate properties.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.AddMappings``1(NHibernate.Cfg.Configuration)">
            <summary>
            Adds T mapping to <paramref name="configuration"/> .
            </summary>
            <typeparam name="T">The mapping class.</typeparam>
            <param name="configuration">The existing <see cref="T:NHibernate.Cfg.Configuration"/>.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.ThrowIfRequiredPropertiesAreMissing(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Validates minimum required NHibernate properties.
            </summary>
            <param name="props">Properties to validate.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.ConfigureSqlLiteIfRunningInDebugModeAndNoConfigPropertiesSet(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            It ensures that in DEBUG mode SqlLite is configured if no other settings are specified.
            </summary>
            <param name="properties">The properties to use.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.ConfigureNHibernate.CreateConfigurationWith(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Created and initializes a <see cref="T:NHibernate.Cfg.Configuration"/> based on <paramref name="properties"/> specified.
            </summary>
            <param name="properties">The properties to use.</param>
            <returns>A properly initialized <see cref="T:NHibernate.Cfg.Configuration"/>.</returns>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.NHibernateSettingRetriever">
            <summary>
            Abstraction of a source of configuration data.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateSettingRetriever.AppSettings">
            <summary>
            Gets the <see cref="T:System.Configuration.AppSettingsSection"/> data for the current application's default configuration.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.NHibernate.NHibernateSettingRetriever.ConnectionStrings">
            <summary>
            Gets the <see cref="T:System.Configuration.ConnectionStringsSection"/> data for the current application's default configuration.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.SubscriptionConfig">
            <summary>
            Subscription configuration extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.SubscriptionConfig.DisableSubscriptionStorageSchemaUpdate(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence})">
            <summary>
            Disables automatic schema update.
            </summary>
            <param name="persistenceConfiguration"></param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.SubscriptionConfig.UseSubscriptionStorageConfiguration(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},NHibernate.Cfg.Configuration)">
            <summary>
            Configures Subscription Storage to use the <paramref name="configuration"/>.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.SubscriptionConfig.EnableCachingForSubscriptionStorage(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},System.TimeSpan)">
            <summary>
            Enables Subscription Storage to use caching.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="expiration">The period of time to cache subscriptions list for.</param>
        </member>
        <member name="T:NServiceBus.Persistence.NHibernate.TimeoutConfig">
            <summary>
            Timeout configuration extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.TimeoutConfig.DisableTimeoutStorageSchemaUpdate(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence})">
            <summary>
            Disables automatic schema update.
            </summary>
            <param name="persistenceConfiguration"></param>
        </member>
        <member name="M:NServiceBus.Persistence.NHibernate.TimeoutConfig.UseTimeoutStorageConfiguration(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},NHibernate.Cfg.Configuration)">
            <summary>
            Configures Timeout Storage to use the <paramref name="configuration"/>.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
        </member>
        <member name="T:NServiceBus.Persistence.SharedConfig">
            <summary>
            Shared configuration extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.SharedConfig.ConnectionString(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},System.String)">
            <summary>
            Sets the connection string to use for all storages
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="connectionString">The connection string to use.</param>
        </member>
        <member name="M:NServiceBus.Persistence.SharedConfig.DisableSchemaUpdate(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence})">
            <summary>
            Disables automatic schema update.
            </summary>
            <param name="persistenceConfiguration"></param>
        </member>
        <member name="M:NServiceBus.Persistence.SharedConfig.UseConfiguration(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},NHibernate.Cfg.Configuration)">
            <summary>
            Configures Subscription Storage to use the <paramref name="configuration"/>.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="configuration">The <see cref="T:NHibernate.Cfg.Configuration"/> object.</param>
        </member>
        <member name="M:NServiceBus.Persistence.SharedConfig.RegisterManagedSessionInTheContainer(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence})">
            <summary>
            Instructs the NHibernate persistence to register the managed session available via NHibernateStorageSession in the container.
            </summary>
            <param name="persistenceConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Persistence.SharedConfig.UseCustomSessionCreationMethod(NServiceBus.PersistenceExtentions{NServiceBus.NHibernatePersistence},System.Func{NHibernate.ISessionFactory,System.String,NHibernate.ISession})">
            <summary>
            Instructs the NHibernate persistence to use a custom session creation method. The provided method takes the ISessionFactory and the connection string and returns a session.
            </summary>
            <param name="persistenceConfiguration"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.Features.NHibernateGatewayDeduplication">
            <summary>
            NHibernate Gateway Deduplication.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateGatewayDeduplication.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Features.NHibernateGatewayDeduplication"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateGatewayDeduplication.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.NHibernateDBConnectionProvider">
            <summary>
            Provides access to connections available on the pipeline
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateDBConnectionProvider.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Registers the connection provider in DI.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:NServiceBus.Features.NHibernateOutboxStorage">
            <summary>
            NHibernate Outbox Storage.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateOutboxStorage.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Features.NHibernateOutboxStorage"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateOutboxStorage.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.NHibernateSagaStorage">
            <summary>
            NHibernate Saga Storage.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateSagaStorage.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Features.NHibernateSagaStorage"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateSagaStorage.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.NHibernateStorageSession">
            <summary>
            NHibernate Storage Session.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateStorageSession.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.NHibernateSubscriptionStorage">
            <summary>
            NHibernate Subscription Storage
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateSubscriptionStorage.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Features.NHibernateSubscriptionStorage"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateSubscriptionStorage.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.NHibernateTimeoutStorage">
            <summary>
            NHibernate Timeout Storage.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateTimeoutStorage.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Features.NHibernateTimeoutStorage"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.NHibernateTimeoutStorage.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateGatewayDeduplication">
            <summary>
            Configuration extensions for the NHibernate Gateway deduplication
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayDeduplication.UseNHibernateGatewayDeduplication(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Gateway deduplication.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Deduplication" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=gateway;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayDeduplication.UseNHibernateGatewayDeduplication(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="configuration">The <see cref="N:NServiceBus.Configuration"/> object.</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateGatewayDeduplication.DisableNHibernateGatewayDeduplicationInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateSagaPersister">
            <summary>
            Contains extension methods to NServiceBus.Configure for the NHibernate saga persister.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Saga Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Saga" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=sagas;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(NServiceBus.Configure,System.Func{System.Type,System.String})">
            <summary>
            Configures NHibernate Saga Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Saga" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=sagas;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <param name="tableNamingConvention">Convention to use for naming tables.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            DB schema is updated if requested by the user
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure" /> object.</param>
            <param name="configuration">The <see cref="N:NServiceBus.Configuration" /> allows the application to specify properties and mapping documents to be used when creating a <see cref="T:NHibernate.ISessionFactory" />.</param>
            <returns>The <see cref="T:NServiceBus.Configure" /> object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSagaPersister.UseNHibernateSagaPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration,System.Func{System.Type,System.String})">
            <summary>
            Configures the storage with the user supplied persistence configuration
            DB schema is updated if requested by the user
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure" /> object.</param>
            <param name="configuration">The <see cref="N:NServiceBus.Configuration" /> allows the application to specify properties and mapping documents to be used when creating a <see cref="T:NHibernate.ISessionFactory" />.</param>
            <param name="tableNamingConvention">Convention to use for naming tables.</param>
            <returns>The <see cref="T:NServiceBus.Configure" /> object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateSubscriptionStorage">
            <summary>
            Configuration extensions for the NHibernate subscription storage
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.UseNHibernateSubscriptionPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Subscription Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Subscription" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=subscription;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.UseNHibernateSubscriptionPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration)">
            <summary>
            Configures the storage with the user supplied persistence configuration
            DB schema is updated if requested by the user
            </summary>
            <param name="config">The <see cref="T:NServiceBus.Configure" /> object.</param>
            <param name="configuration">The <see cref="N:NServiceBus.Configuration" /> allows the application to specify properties and mapping documents to be used when creating a <see cref="T:NHibernate.ISessionFactory" />.</param>
            <returns>The <see cref="T:NServiceBus.Configure" /> object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateSubscriptionStorage.DisableNHibernateSubscriptionPersisterInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureNHibernateTimeoutPersister">
            <summary>
            Configuration extensions for the NHibernate Timeouts persister
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.UseNHibernateTimeoutPersister(NServiceBus.Configure)">
            <summary>
            Configures NHibernate Timeout Persister.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the minimum configuration:
            <code lang="XML" escaped="true">
             <appSettings>
               <!-- other optional settings examples -->
               <add key="NServiceBus/Persistence/NHibernate/connection.provider" value="NHibernate.Connection.DriverConnectionProvider"/>
               <add key="NServiceBus/Persistence/NHibernate/connection.driver_class" value="NHibernate.Driver.Sql2008ClientDriver"/>
               <!-- For more setting see http://www.nhforge.org/doc/nh/en/#configuration-hibernatejdbc and http://www.nhforge.org/doc/nh/en/#configuration-optional -->
             </appSettings>
             
             <connectionStrings>
               <!-- Default connection string for all persisters -->
               <add name="NServiceBus/Persistence/NHibernate" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=nservicebus;Integrated Security=True" />
               
               <!-- Optional overrides per persister -->
               <add name="NServiceBus/Persistence/NHibernate/Timeout" connectionString="Data Source=.\SQLEXPRESS;Initial Catalog=timeout;Integrated Security=True" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.UseNHibernateTimeoutPersister(NServiceBus.Configure,NHibernate.Cfg.Configuration,System.Boolean)">
            <summary>
            Configures the storage with the user supplied persistence configuration.
            Database schema is updated if requested by the user.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="configuration">The <see cref="N:NServiceBus.Configuration"/> object.</param>
            <param name="autoUpdateSchema"><value>true</value> to auto update schema</param>
            <returns>The configuration object</returns>
        </member>
        <member name="M:NServiceBus.ConfigureNHibernateTimeoutPersister.DisableNHibernateTimeoutPersisterInstall(NServiceBus.Configure)">
            <summary>
            Disables the automatic creation of the database schema.
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.NHibernatePersistence">
            <summary>
            NHibernate persistence for everything.
            </summary>
        </member>
        <member name="M:NServiceBus.NHibernatePersistence.#ctor">
            <summary>
            Constructor that defines the capabilities of the storage
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.LockModes">
            <summary>
            The <see cref="T:NServiceBus.SagaPersisters.NHibernate.LockModes"/> class defines the different lock levels that may be acquired by NHibernate.
            </summary>
        </member>
        <member name="F:NServiceBus.SagaPersisters.NHibernate.LockModes.None">
            <summary>
            No lock required. 
            </summary>
            <remarks>
            If an object is requested with this lock mode, a <c>Read</c> lock
            might be obtained if necessary.
            </remarks>
        </member>
        <member name="F:NServiceBus.SagaPersisters.NHibernate.LockModes.Read">
            <summary>
            A shared lock. 
            </summary>
            <remarks>
            Objects are loaded in <c>Read</c> mode by default
            </remarks>
        </member>
        <member name="F:NServiceBus.SagaPersisters.NHibernate.LockModes.Upgrade">
            <summary>
            An upgrade lock. 
            </summary>
            <remarks>
            Objects loaded in this lock mode are materialized using an
            SQL <c>SELECT ... FOR UPDATE</c>
            </remarks>
        </member>
        <member name="F:NServiceBus.SagaPersisters.NHibernate.LockModes.UpgradeNoWait">
            <summary>
            Attempt to obtain an upgrade lock, using an Oracle-style
            <c>SELECT ... FOR UPGRADE NOWAIT</c>. 
            </summary>
            <remarks>
            The semantics of this lock mode, once obtained, are the same as <c>Upgrade</c>
            </remarks>
        </member>
        <member name="F:NServiceBus.SagaPersisters.NHibernate.LockModes.Write">
            <summary>
            A <c>Write</c> lock is obtained when an object is updated or inserted.
            </summary>
            <remarks>
            This is not a valid mode for <c>Load()</c> or <c>Lock()</c>.
            </remarks>
        </member>
        <member name="F:NServiceBus.SagaPersisters.NHibernate.LockModes.Force">
            <summary> 
            Similar to <see cref="F:NServiceBus.SagaPersisters.NHibernate.LockModes.Upgrade"/> except that, for versioned entities,
            it results in a forced version increment.
            </summary>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.RowVersionAttribute">
            <summary>
            Marks a property to be used as a versioning column.
            </summary>
            <remarks>
            For more details see http://www.nhforge.org/doc/nh/en/#mapping-declaration-version
            </remarks>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.LockModeAttribute">
            <summary>
            Specifies the lock mode to use by default while retrieving <see cref="N:NServiceBus.Saga"/> data.
            </summary>
            /// <remarks>
            It is not intended that users spend much time worrying about locking since Hibernate
            usually obtains exactly the right lock level automatically. Some "advanced" users may
            wish to explicitly specify lock levels.
            If not specified we use <see cref="F:NServiceBus.SagaPersisters.NHibernate.LockModes.Upgrade"/>.
            For more information about lock modes see http://www.nhforge.org/doc/nh/en/#transactions-locking
            </remarks>
        </member>
        <member name="P:NServiceBus.SagaPersisters.NHibernate.LockModeAttribute.RequestedLockMode">
            <summary>
            Gets the <see cref="T:NServiceBus.SagaPersisters.NHibernate.LockModes"/> to be used by the framework while retrieving <see cref="N:NServiceBus.Saga"/> data.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.LockModeAttribute.#ctor(NServiceBus.SagaPersisters.NHibernate.LockModes)">
            <summary>
            Create a new instance of <see cref="T:NServiceBus.SagaPersisters.NHibernate.LockModeAttribute"/>.
            </summary>
            <param name="lockModeToUse">The <see cref="T:NServiceBus.SagaPersisters.NHibernate.LockModes"/> to be used by the framework while retrieving <see cref="N:NServiceBus.Saga"/> data.</param>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.TableNameAttribute">
            <summary>
            Table name to use.
            </summary>
        </member>
        <member name="P:NServiceBus.SagaPersisters.NHibernate.TableNameAttribute.TableName">
            <summary>
            Gets the table name.
            </summary>
        </member>
        <member name="P:NServiceBus.SagaPersisters.NHibernate.TableNameAttribute.Schema">
            <summary>
            Gets or sets the database schema to use for the table.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.TableNameAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.SagaPersisters.NHibernate.TableNameAttribute"/>.
            </summary>
            <param name="tableName">The table name to use.</param>
        </member>
        <member name="T:NServiceBus.SagaPersisters.NHibernate.SagaPersister">
            <summary>
            Saga persister implementation using NHibernate.
            </summary>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Save(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Saves the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be saved.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Update(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Updates the given saga entity using the current session of the
            injected session factory.
            </summary>
            <param name="saga">the saga entity that will be updated.</param>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Get``1(System.Guid)">
            <summary>
            Gets a saga entity from the injected session factory's current session
            using the given saga id.
            </summary>
            <param name="sagaId">The saga id to use in the lookup.</param>
            <returns>The saga entity if found, otherwise null.</returns>
        </member>
        <member name="M:NServiceBus.SagaPersisters.NHibernate.SagaPersister.Complete(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Deletes the given saga from the injected session factory's
            current session.
            </summary>
            <param name="saga">The saga entity that will be deleted.</param>
        </member>
        <member name="T:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessage">
            <summary>
            The Gateway message
            </summary>
        </member>
        <member name="P:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessage.Id">
            <summary>
            Id of this message.
            </summary>
        </member>
        <member name="P:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessage.TimeReceived">
            <summary>
            The time at which the message was received.
            </summary>
        </member>
        <member name="T:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessageMap">
            <summary>
            Deduplication message mapping class.
            </summary>
        </member>
        <member name="M:NServiceBus.Deduplication.NHibernate.Config.DeduplicationMessageMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.NHibernate.Subscription">
            <summary>
            Entity containing subscription data
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.NHibernate.SubscriptionPersister">
            <summary>
                Subscription storage using NHibernate for persistence
            </summary>
        </member>
        <member name="T:NServiceBus.TimeoutPersisters.NHibernate.Config.TimeoutEntityMap">
            <summary>
            Timeout entity map class
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.Config.TimeoutEntityMap.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.Installer.OptimizedSchemaUpdate.Exceptions">
            <summary>
                Returns a List of all Exceptions which occured during the export.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.Installer.OptimizedSchemaUpdate.Execute(System.Boolean,System.Boolean)">
            <summary>
                Execute the schema updates
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.Installer.OptimizedSchemaUpdate.Execute(System.Action{System.String},System.Boolean)">
            <summary>
                Execute the schema updates
            </summary>
            <param name="scriptAction">The action to write the each schema line.</param>
            <param name="doUpdate">Commit the script to DB</param>
        </member>
        <member name="T:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity">
            <summary>
            NHibernate wrapper class for <see cref="T:NServiceBus.Timeout.Core.TimeoutData"/>
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Id">
            <summary>
            Id of this timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.State">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Time">
            <summary>
            The time at which the saga ID expired.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Headers">
            <summary>
            Store the headers to preserve them across timeouts.
            </summary>
        </member>
        <member name="P:NServiceBus.TimeoutPersisters.NHibernate.TimeoutEntity.Endpoint">
            <summary>
            Timeout endpoint name.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutPersister.GetNextChunk(System.DateTime,System.DateTime@)">
            <summary>
                Retrieves the next range of timeouts that are due.
            </summary>
            <param name="startSlice">The time where to start retrieving the next slice, the slice should exclude this date.</param>
            <param name="nextTimeToRunQuery">Returns the next time we should query again.</param>
            <returns>Returns the next range of timeouts that are due.</returns>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutPersister.Add(NServiceBus.Timeout.Core.TimeoutData)">
            <summary>
                Adds a new timeout.
            </summary>
            <param name="timeout">Timeout data.</param>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutPersister.TryRemove(System.String,NServiceBus.Timeout.Core.TimeoutData@)">
            <summary>
                Removes the timeout if it hasn't been previously removed.
            </summary>
            <param name="timeoutId">The timeout id to remove.</param>
            <param name="timeoutData">The timeout data of the removed timeout.</param>
            <returns><c>true</c> it the timeout was successfully removed.</returns>
        </member>
        <member name="M:NServiceBus.TimeoutPersisters.NHibernate.TimeoutPersister.RemoveTimeoutBy(System.Guid)">
            <summary>
                Removes the time by saga id.
            </summary>
            <param name="sagaId">The saga id of the timeouts to remove.</param>
        </member>
    </members>
</doc>
