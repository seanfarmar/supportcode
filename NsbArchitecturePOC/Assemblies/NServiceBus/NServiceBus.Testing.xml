<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Testing</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.Testing.Handler`1">
            <summary>
            Message handler unit testing framework.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.#ctor(`0,NServiceBus.Testing.StubBus)">
            <summary>
            Creates a new instance of the handler tester.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.WithExternalDependencies(System.Action{`0})">
            <summary>
            Provides a way to set external dependencies on the handler under test.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.SetIncomingHeader(System.String,System.String)">
            <summary>
            Set the headers on an incoming message that will be return
            when code calls Bus.CurrentMessageContext.Headers
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectSend``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler sends a message of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotSend``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler does not send a message of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotReply``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler does not reply with a given message
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectReply``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler replies with the given message type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectSendLocal``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler sends the given message type to its local queue
            and that the message complies with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotSendLocal``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler does not send a message type to its local queue that complies with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectReturn``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler uses the bus to return the appropriate error code.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectSendToDestination``1(System.Func{``0,NServiceBus.Address,System.Boolean})">
            <summary>
            Check that the handler sends the given message type to the appropriate destination.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectPublish``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler publishes a message of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotPublish``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the handler does not publish any messages of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectDoNotContinueDispatchingCurrentMessageToHandlers">
            <summary>
            Check that the handler tells the bus to stop processing the current message.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectHandleCurrentMessageLater">
            <summary>
            Check that the handler tells the bus to handle the current message later.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectSendToSites``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean})">
            <summary>
            Check that the handler sends a message of the given type to sites
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotSendToSites``1(System.Func{``0,System.Collections.Generic.IEnumerable{System.String},System.Boolean})">
            <summary>
            Check that the handler doesn't send a message of the given type to sites
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectDefer``1(System.Func{``0,System.TimeSpan,System.Boolean})">
            <summary>
            Check that the handler defers a message of the given type
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectDefer``1(System.Func{``0,System.DateTime,System.Boolean})">
            <summary>
            Check that the handler defers a message of the given type
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotDefer``1(System.Func{``0,System.TimeSpan,System.Boolean})">
            <summary>
            Check that the handler doesn't defer a message of the given type
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.ExpectNotDefer``1(System.Func{``0,System.DateTime,System.Boolean})">
            <summary>
            Check that the handler doesn't defer a message of the given type
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.OnMessage``1(System.Action{``0})">
            <summary>
            Activates the test that has been set up passing in the given message.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.OnMessage``1(System.String,System.Action{``0})">
            <summary>
            Activates the test that has been set up passing in the given message, 
            setting the incoming headers and the message Id.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.OnMessage``1(``0)">
            <summary>Activates the test that has been set up passing in a specific message to be used.</summary>
            <param name="initializedMessage">A message to be used with message handler.</param>
            <remarks>This is different from "<![CDATA[public void OnMessage<TMessage>(Action<TMessage> initializedMessage)]]>" in a way that it uses the message, and not calls to an action.</remarks>
            <example><![CDATA[var message = new TestMessage {//...}; Test.Handler<EmptyHandler>().OnMessage<TestMessage>(message);]]></example>
        </member>
        <member name="M:NServiceBus.Testing.Handler`1.OnMessage``1(``0,System.String)">
            <summary>
            Activates the test that has been set up passing in given message,
            setting the incoming headers and the message Id.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="T:NServiceBus.Testing.Saga`1">
            <summary>
            Saga unit testing framework.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.WithExternalDependencies(System.Action{`0})">
            <summary>
            Provides a way to set external dependencies on the saga under test.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.WhenReceivesMessageFrom(System.String)">
            <summary>
            Set the address of the client that caused the saga to be started.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.SetIncomingHeader(System.String,System.String)">
            <summary>
            Set the headers on an incoming message that will be return
            when code calls Bus.CurrentMessageContext.Headers
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.SetMessageId(System.String)">
            <summary>
            Sets the Id of the incoming message that will be returned
            when code calls Bus.CurrentMessageContext.Id
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectSend``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga sends a message of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectSend``1(System.Action{``0})">
            <summary>
            Check that the saga sends a message of the given type complying with user-supplied assertions.
            </summary>
            <param name="check">An action containing assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNotSend``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga does not send a message of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNotSend``1(System.Action{``0})">
            <summary>
            Check that the saga does not send a message of the given type complying with the given predicate.
            </summary>
            <param name="check">An action containing assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectReply``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga replies with the given message type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectSendLocal``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga sends the given message type to its local queue
            and that the message complies with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectSendLocal``1(System.Action{``0})">
            <summary>
            Check that the saga sends the given message type to its local queue
            and that the message complies with the given predicate.
            </summary>
            <param name="check">An action that performs assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNotSendLocal``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga does not send a message type to its local queue that complies with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNotSendLocal``1(System.Action{``0})">
            <summary>
            Check that the saga does not send a message type to its local queue that complies with the given predicate.
            </summary>
            <param name="check">An action that performs assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectSendToDestination``1(System.Func{``0,NServiceBus.Address,System.Boolean})">
            <summary>
            Check that the saga sends the given message type to the appropriate destination.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectSendToDestination``1(System.Action{``0,NServiceBus.Address})">
            <summary>
            Check that the saga sends the given message type to the appropriate destination.
            </summary>
            <param name="check">An action that performs assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectReplyToOriginator``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga replies to the originator with the given message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectReplyToOriginator``1(System.Action{``0})">
            <summary>
            Check that the saga replies to the originator with the given message type.
            </summary>
            <param name="check">An action that performs assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectPublish``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga publishes a message of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectPublish``1(System.Action{``0})">
            <summary>
            Check that the saga publishes a message of the given type complying with the given predicate.
            </summary>
            <param name="check">An action that performs assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNotPublish``1(System.Func{``0,System.Boolean})">
            <summary>
            Check that the saga does not publish any messages of the given type complying with the given predicate.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNotPublish``1(System.Action{``0})">
            <summary>
            Check that the saga does not publish any messages of the given type complying with the given predicate.
            </summary>
            <param name="check">An action that performs assertions on the message.</param>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectHandleCurrentMessageLater">
            <summary>
            Check that the saga tells the bus to handle the current message later.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.WhenHandling``1(System.Action{``0})">
            <summary>
            Initializes the given message type and checks all the expectations previously set up,
            and then clears them for continued testing.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.When(System.Action{`0})">
            <summary>
            Uses the given delegate to invoke the saga, checking all the expectations previously set up,
            and then clearing them for continued testing.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.WhenSagaTimesOut">
            <summary>
            Invokes the saga timeout passing in the last timeout state it sent
            and then clears out all previous expectations.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.AssertSagaCompletionIs(System.Boolean)">
            <summary>
            Asserts that the saga is either complete or not.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectTimeoutToBeSetIn``1(System.Func{``0,System.TimeSpan,System.Boolean})">
            <summary>
            Verifies that the saga is setting the specified timeout
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNoTimeoutToBeSetIn``1(System.Func{``0,System.TimeSpan,System.Boolean})">
            <summary>
            Verifies that the saga is not setting the specified timeout
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectTimeoutToBeSetIn``1(System.Action{``0,System.TimeSpan})">
            <summary>
            Verifies that the saga is setting the specified timeout
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectTimeoutToBeSetAt``1(System.Func{``0,System.DateTime,System.Boolean})">
            <summary>
            Verifies that the saga is setting the specified timeout
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectNoTimeoutToBeSetAt``1(System.Func{``0,System.DateTime,System.Boolean})">
            <summary>
            Verifies that the saga is not setting the specified timeout
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Saga`1.ExpectTimeoutToBeSetAt``1(System.Action{``0,System.DateTime})">
            <summary>
            Verifies that the saga is setting the specified timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Testing.Saga`1.OutgoingHeaders">
            <summary>
            Get the headers set by the saga when it sends a message.
            </summary>
        </member>
        <member name="T:NServiceBus.Testing.Test">
            <summary>
                Entry class used for unit testing
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Initialize(System.Action{NServiceBus.BusConfiguration})">
            <summary>
                Initializes the testing infrastructure.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Initialize(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Initializes the testing infrastructure specifying which assemblies to scan.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Initialize(System.Reflection.Assembly[])">
            <summary>
                Initializes the testing infrastructure specifying which assemblies to scan.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Initialize(System.Type[])">
            <summary>
                Initializes the testing infrastructure specifying which types to scan.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Saga``1">
            <summary>
                Begin the test script for a saga of type T.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Saga``1(System.Guid)">
            <summary>
                Begin the test script for a saga of type T while specifying the saga id.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Saga``1(``0)">
            <summary>
                Begin the test script for the passed in saga instance.
                Callers need to instantiate the saga's data class as well as give it an ID.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Handler``1">
            <summary>
                Specify a test for a message handler of type T for a given message of type TMessage.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Handler``1(``0)">
            <summary>
                Specify a test for a message handler while supplying the instance to
                test - injects the bus into a public property (if it exists).
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.Handler``1(System.Func{NServiceBus.IBus,``0})">
            <summary>
                Specify a test for a message handler specifying a callback to create
                the handler and getting an instance of the bus passed in.
                Useful for handlers based on constructor injection.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.CreateInstance``1">
            <summary>
                Instantiate a new message of type TMessage.
            </summary>
        </member>
        <member name="M:NServiceBus.Testing.Test.CreateInstance``1(System.Action{``0})">
            <summary>
                Instantiate a new message of type TMessage performing the given action
                on the created message.
            </summary>
        </member>
        <member name="P:NServiceBus.Testing.Test.Bus">
            <summary>
                Get the reference to the bus used for testing.
            </summary>
        </member>
    </members>
</doc>
