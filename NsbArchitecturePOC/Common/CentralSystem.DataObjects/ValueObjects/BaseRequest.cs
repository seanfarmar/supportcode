using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace CentralSystem.DataObjects.ValueObjects
{
    /// <summary>
    /// Basic class for request
    /// </summary>
    [DataContract]
    public class BaseRequest
    {

        #region Constructors

        /// <summary>
        /// Default constructor
        /// </summary>
        public BaseRequest()
        {
            CreateDate = DateTime.Now;
            RequestContext = new RequestContext();
        }

        #endregion

        #region Properties

        /// <summary>
        /// The brand ID
        /// </summary>
        [DataMember]
        public short BrandID { get; set; }

        /// <summary>
        /// Version of the API used in the request.
        /// API version is per Service (i.e. Issue Ticket in CS has a specific API version).
        /// API version to be implemented as constants code.
        /// </summary>
        [DataMember]
        public string APIVersion { get; set; }

        /// <summary>
        /// Unique identifier of the originator system which is initially initiated the request(s) chain. 
        /// </summary>
        [DataMember]
        public string OriginatorSystemID { get; set; }

        /// <summary>
        /// Unique code that marks if the originator request: I=iLottery, T=Terminal
        /// </summary>
        [DataMember]
        public char RequestSystemType { get; set; }

        /// <summary>
        /// Unique code that marks the external game provider identifier. 
        /// Will be blank by default and will contain one of the following values for request originated from external game provider
        /// </summary>
        [DataMember]
        public char RequestSystemSubType { get; set; }

        /// <summary>
        /// Identifier of the request.
        /// For services which require Idem potency, the RequestID will be generated by DB ( on the consumer’s side).
        /// For other synchronous services RequestID is not required.
        /// </summary>
        [DataMember]
        public string RequestID { get; set; }

        /// <summary>
        /// Help function to validate if defined request ID
        /// </summary>
        /// <returns>True - undefined or empty request ID</returns>
        public bool RequestIDIsMissing()
        {
            if (string.IsNullOrEmpty(RequestID) || RequestID == "0")
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// BTMID stands for Business transaction management identifier.
        /// It is Identifier of the business flow in which the API was called.
        /// This is a GUID which is passed along the entire lifecycle of this request.
        /// </summary>
        [DataMember]
        public string BTMID { get; set; }

        /// <summary>
        /// Identifier of the application who initiated the request AND the application version AND class name.
        /// This value should be populated automatically by the infrastructure via reflection or similar (e.g. me.Name + ‘.’ + me.Version) [ApplicationName].[ApplicationVersion]
        /// </summary>
        [DataMember]
        public string InitiatingApplication { get; set; }

        /// <summary>
        /// The initiator Account ID (CGS Active Directory Username) - the username under which the consumer application is running.
        /// </summary>
        [DataMember]
        public string InitiatingAccountID { get; set; }

        /// <summary>
        /// Marks the terminal ID from which the original business request arrived.
        /// For CS call will be 0 If the request was issued from ILottery. 
        /// For CS call from Terminals will be the TerminalID.
        /// </summary>
        [DataMember]
        public int SubSystemID { get; set; }

        /// <summary>
        /// Requester type : P=Player, O=Operator, T=Terminal Operator
        /// </summary>
        [DataMember]
        public char RequesterType { get; set; }

        /// <summary>
        /// The Id of the actual Requester account. Will be one of the following :
        /// - PlayerID – hashed value – if the request was issued due to a player action
        /// - OperatorId – if the request was issued by operator action from Control Room OR from NG back office
        /// - TerminalOperatorId - if the request was issued from terminal 
        /// Note: Do not use this value for Business logic. For business logic use ONLY data from the payload
        /// </summary>
        [DataMember]
        public string RequesterID { get; set; }

        #endregion    

        #region Extended Business Properties

        /// <summary>
        /// Created date
        /// </summary>
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// Context of request
        /// </summary>
        public RequestContext RequestContext { get; private set; }

        #endregion

        #region Methods

        /// <summary>
        /// Copy base request headers
        /// </summary>
        /// <param name="sourceRequestWithHeaders">Base request</param>
        public void CopyHeadersFrom(BaseRequest sourceRequestWithHeaders)
        {
            BrandID = sourceRequestWithHeaders.BrandID;
            APIVersion = sourceRequestWithHeaders.APIVersion;
            BTMID = sourceRequestWithHeaders.BTMID;
            CreateDate = sourceRequestWithHeaders.CreateDate;
            InitiatingAccountID = sourceRequestWithHeaders.InitiatingAccountID;
            InitiatingApplication = sourceRequestWithHeaders.InitiatingApplication;
            OriginatorSystemID = sourceRequestWithHeaders.OriginatorSystemID;
            RequestContext = sourceRequestWithHeaders.RequestContext;
            RequesterID = sourceRequestWithHeaders.RequesterID;
            RequesterType = sourceRequestWithHeaders.RequesterType;
            RequestID = sourceRequestWithHeaders.RequestID;
            RequestSystemSubType = sourceRequestWithHeaders.RequestSystemSubType;
            RequestSystemType = sourceRequestWithHeaders.RequestSystemType;
            SubSystemID = sourceRequestWithHeaders.SubSystemID;
        }

        #endregion

    }
}
